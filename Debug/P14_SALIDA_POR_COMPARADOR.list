
P14_SALIDA_POR_COMPARADOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800037c  08000384  00010384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800037c  0800037c  00010384  2**0
                  CONTENTS
  4 .ARM          00000000  0800037c  0800037c  00010384  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800037c  08000384  00010384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800037c  0800037c  0001037c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000380  08000380  00010380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000384  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000384  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010384  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000573  00000000  00000000  000103b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000011d  00000000  00000000  00010927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00010a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f67  00000000  00000000  00010b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000bb2  00000000  00000000  00011a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee31  00000000  00000000  00012629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a145a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c8  00000000  00000000  000a14ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000364 	.word	0x08000364

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000364 	.word	0x08000364

08000204 <main>:
#include "timer.h"
/*Este programa conecta el canal 1 del tima 2 al pin 5 del purto e intercambia su valor
 * entre 1 y 0 (0v-3.3v). Al conectar el timer directamente al Pin del puero, se requiere configurar
 * el puerto GPIOx*/

int main(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

	confit_GPIOA5();
 8000208:	f000 f804 	bl	8000214 <confit_GPIOA5>
	tim2_modo_comparacion();
 800020c:	f000 f82a 	bl	8000264 <tim2_modo_comparacion>

	while(1){
 8000210:	e7fe      	b.n	8000210 <main+0xc>
	...

08000214 <confit_GPIOA5>:

	/*Habilita el temporizador*/
	TIM2->CR1 |= CR1_CEN;//El registro CR1 es un registro de control
}

void confit_GPIOA5(void){
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0

	//1. Habilitar el acceso a reloj al GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 8000218:	4b10      	ldr	r3, [pc, #64]	; (800025c <confit_GPIOA5+0x48>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a0f      	ldr	r2, [pc, #60]	; (800025c <confit_GPIOA5+0x48>)
 800021e:	f043 0301 	orr.w	r3, r3, #1
 8000222:	6313      	str	r3, [r2, #48]	; 0x30

	/*Configure PA5 en modo alternativo*/
	GPIOA -> MODER &=  ~(1U<<10);
 8000224:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <confit_GPIOA5+0x4c>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a0d      	ldr	r2, [pc, #52]	; (8000260 <confit_GPIOA5+0x4c>)
 800022a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800022e:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |=	(1U<<11);
 8000230:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <confit_GPIOA5+0x4c>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a0a      	ldr	r2, [pc, #40]	; (8000260 <confit_GPIOA5+0x4c>)
 8000236:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800023a:	6013      	str	r3, [r2, #0]

	/*Configura el tipo de funcion alternativo TIMER2_CH1 (AF01),registro AFRL*/
	GPIOA->AFR[0] |=  (1U<<20);
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <confit_GPIOA5+0x4c>)
 800023e:	6a1b      	ldr	r3, [r3, #32]
 8000240:	4a07      	ldr	r2, [pc, #28]	; (8000260 <confit_GPIOA5+0x4c>)
 8000242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000246:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= (~(1U<<23)|~(1U<<22)|~(1U<<21));
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <confit_GPIOA5+0x4c>)
 800024a:	4a05      	ldr	r2, [pc, #20]	; (8000260 <confit_GPIOA5+0x4c>)
 800024c:	6a1b      	ldr	r3, [r3, #32]
 800024e:	6213      	str	r3, [r2, #32]

}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	40023800 	.word	0x40023800
 8000260:	40020000 	.word	0x40020000

08000264 <tim2_modo_comparacion>:

void tim2_modo_comparacion(void){
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0

	/*Activar (Conectar) el reloj para el temporizador*/
	RCC->APB1ENR |= TMR2_ON;
 8000268:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <tim2_modo_comparacion+0x60>)
 800026a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800026c:	4a15      	ldr	r2, [pc, #84]	; (80002c4 <tim2_modo_comparacion+0x60>)
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6413      	str	r3, [r2, #64]	; 0x40

	/*Estableser el valor del prescalador*/
	TIM2->PSC=1600-1;/// Es escribe de esta manera porque se cuenta desde cero.
 8000274:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000278:	f240 623f 	movw	r2, #1599	; 0x63f
 800027c:	629a      	str	r2, [r3, #40]	; 0x28
	 *                    CLK_SYS  (Reloj del sistema)
	 * Prescalizador  =  ---------
	 *                      PSC    (Valor cargado en el registro PSC*/

	/*Valor de la recarga automatica*/
	TIM2->ARR=10000-1;
 800027e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000282:	f242 720f 	movw	r2, #9999	; 0x270f
 8000286:	62da      	str	r2, [r3, #44]	; 0x2c

	/*El registro ARR es un contador (Progresivo o Regresivo) previo su valor de carga.
	 * Cuando este termina de contar activa una bandera*/

	/*Configuracion de la salida en modo comparaci贸n*/
	TIM2->CCMR1 |= OC_TOGLE;
 8000288:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800028c:	699b      	ldr	r3, [r3, #24]
 800028e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000292:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000296:	6193      	str	r3, [r2, #24]
	/*Esta habilitaci贸n se realiza en el registro CCMR1 bits 4 al seis segun el OCxM donde x
	 * correspnde al canal del timer*/

	/*Habilitaci贸n del canal uno del timer2 en modo comparaci贸n */
	TIM2->CCER |= CCER_CC1E;
 8000298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	6213      	str	r3, [r2, #32]

	/*Borrar el contador del temporizacor*/
	TIM2->CNT=0;//Borrar el valor acual del contador
 80002a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ac:	2200      	movs	r2, #0
 80002ae:	625a      	str	r2, [r3, #36]	; 0x24

	/*Este registro muesta el valor acual del contador*/

	/*Habilita el temporizador*/
	TIM2->CR1 = CR1_CEN;//El registro CR1 es un registro de control
 80002b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002b4:	2201      	movs	r2, #1
 80002b6:	601a      	str	r2, [r3, #0]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40023800 	.word	0x40023800

080002c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c8:	480d      	ldr	r0, [pc, #52]	; (8000300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d0:	480c      	ldr	r0, [pc, #48]	; (8000304 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d2:	490d      	ldr	r1, [pc, #52]	; (8000308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d4:	4a0d      	ldr	r2, [pc, #52]	; (800030c <LoopForever+0xe>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d8:	e002      	b.n	80002e0 <LoopCopyDataInit>

080002da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002de:	3304      	adds	r3, #4

080002e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e4:	d3f9      	bcc.n	80002da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e8:	4c0a      	ldr	r4, [pc, #40]	; (8000314 <LoopForever+0x16>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ec:	e001      	b.n	80002f2 <LoopFillZerobss>

080002ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f0:	3204      	adds	r2, #4

080002f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f4:	d3fb      	bcc.n	80002ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f6:	f000 f811 	bl	800031c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fa:	f7ff ff83 	bl	8000204 <main>

080002fe <LoopForever>:

LoopForever:
  b LoopForever
 80002fe:	e7fe      	b.n	80002fe <LoopForever>
  ldr   r0, =_estack
 8000300:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000308:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800030c:	08000384 	.word	0x08000384
  ldr r2, =_sbss
 8000310:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000314:	2000001c 	.word	0x2000001c

08000318 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000318:	e7fe      	b.n	8000318 <ADC_IRQHandler>
	...

0800031c <__libc_init_array>:
 800031c:	b570      	push	{r4, r5, r6, lr}
 800031e:	4d0d      	ldr	r5, [pc, #52]	; (8000354 <__libc_init_array+0x38>)
 8000320:	4c0d      	ldr	r4, [pc, #52]	; (8000358 <__libc_init_array+0x3c>)
 8000322:	1b64      	subs	r4, r4, r5
 8000324:	10a4      	asrs	r4, r4, #2
 8000326:	2600      	movs	r6, #0
 8000328:	42a6      	cmp	r6, r4
 800032a:	d109      	bne.n	8000340 <__libc_init_array+0x24>
 800032c:	4d0b      	ldr	r5, [pc, #44]	; (800035c <__libc_init_array+0x40>)
 800032e:	4c0c      	ldr	r4, [pc, #48]	; (8000360 <__libc_init_array+0x44>)
 8000330:	f000 f818 	bl	8000364 <_init>
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	10a4      	asrs	r4, r4, #2
 8000338:	2600      	movs	r6, #0
 800033a:	42a6      	cmp	r6, r4
 800033c:	d105      	bne.n	800034a <__libc_init_array+0x2e>
 800033e:	bd70      	pop	{r4, r5, r6, pc}
 8000340:	f855 3b04 	ldr.w	r3, [r5], #4
 8000344:	4798      	blx	r3
 8000346:	3601      	adds	r6, #1
 8000348:	e7ee      	b.n	8000328 <__libc_init_array+0xc>
 800034a:	f855 3b04 	ldr.w	r3, [r5], #4
 800034e:	4798      	blx	r3
 8000350:	3601      	adds	r6, #1
 8000352:	e7f2      	b.n	800033a <__libc_init_array+0x1e>
 8000354:	0800037c 	.word	0x0800037c
 8000358:	0800037c 	.word	0x0800037c
 800035c:	0800037c 	.word	0x0800037c
 8000360:	08000380 	.word	0x08000380

08000364 <_init>:
 8000364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000366:	bf00      	nop
 8000368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036a:	bc08      	pop	{r3}
 800036c:	469e      	mov	lr, r3
 800036e:	4770      	bx	lr

08000370 <_fini>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr
